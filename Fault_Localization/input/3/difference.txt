1
107c107
< 	if (src[*i - 1] == ESCAPE) {
---
> 	if (src[*i] == ESCAPE) {

2
107c107
< 	if (src[*i - 1] == ESCAPE) {
---
> /*	if (src[*i - 1] == ESCAPE) {
110c110
< 	} else	
---
> 	} else	*/

3
494c494
< 	    if ((m >= 0) && (lastm != m)) {
---
> 	    if ((m >= 0) /* && (lastm != m) */) {

4
494c494
< 	    if ((m >= 0) && (lastm != m)) {
---
> 	    if ((m >= 0) && (/* lastm BUG! */ i != m)) {

5
118c118
< 		    for (k = src[*i-1]+1; k<=src[*i+1]; k++) 
---
> 		    for (k = src[*i-1]+1; k< /* = BUG! */ src[*i+1]; k++) 

6
315c315
<     while ((i > offset))
---
>     while ((i >= offset)) /* off by 1 BUG!*/
319c319
< 	    i = offset;
---
> 	    break; /*i = offset;*/

7
176c176
<   return (c == BOL || c == EOL || c == CLOSURE);
---
>   return (c == BOL || c == ANY/*EOL mutation BUG!*/ || c == CLOSURE);

8
176c176
<   return (c == BOL || c == EOL || c == CLOSURE);
---
>   return (c == BOL || c == EOL /* || c == CLOSURE BUG! */);

9
115,116c115,116
< 	    else if ((isalnum(src[*i - 1])) && (isalnum(src[*i + 1])) 
< 		&& (src[*i - 1] <= src[*i + 1]))
---
> 	    else if ((isalnum(src[*i - 1])) && (isalnum(src[*i + 1]))) 
> 		/* && (src[*i - 1] <= src[*i + 1])) missing code */

10
115c115,116
< 	    else if ((isalnum(src[*i - 1])) && (isalnum(src[*i + 1])) 
---
> 	    else if ((isalnum(src[*i - 1])) 
> 		     /* missing code && (isalnum(src[*i + 1])) */

11
116c116
< 		&& (src[*i - 1] <= src[*i + 1]))
---
> 		&& (src[*i - 1] > src[*i])) /* operator mutation and off by one */

12
14c14,15
< # define MAXPAT MAXSTR
---
>       /* was MAXPAT MAXSTR, but did a constant mutation */
> # define MAXPAT 50 

13
500c500,503
< 		i = i + 1;
---
> 		if (m == -1) 
> 		    i = i + 1;
> 		else 
> 		    i = i + 2;  /* added code */

14
370c370
< 		 if ((lin[*i] != NEWLINE) && (!locate(lin[*i], pat, j+1)))
---
> 		 if ((lin[*i] != NEWLINE)) /* missing code  && (!locate(lin[*i], pat, j+1))) */

15
241c241
< 	    result = i;
---
> 	    result = i + 1; /* off by one error */

16
176c176
<   return (c == BOL || c == EOL || c == CLOSURE);
---
>   return (c == BOL || c == EOL || c == CLOSURE || c == ANY); /* added code */

17
75c75
< 	    result = ESCAPE;
---
> 	    result = NEWLINE; /* constant mutation ESCAPE; */

18
370c370,372
< 		 if ((lin[*i] != NEWLINE) && (!locate(lin[*i], pat, j+1)))
---
>        /* removed this code from the following if:
>           ((lin[*i] != NEWLINE) &&  missing code */
> 		 if ((!locate(lin[*i], pat, j+1)))

19
38,39c38
< bool
< getline_alt(s, maxsize)
---
> void getline_alt(s, maxsize, result)
41a41
> bool *result;
43,45c43,46
<     char *result;
<     result = fgets(s, maxsize, stdin);
<     return (result != NULL);
---
>     *result = true;
>     if (!fgets(s, 104, stdin)) {
>       *result = 0;
>     }
513c514
<     result = getline_alt(line, MAXSTR);
---
>     getline_alt(line, MAXSTR, &result);
516c517
< 	result = getline_alt(line, MAXSTR);
---
> 	getline_alt(line, MAXSTR, &result);

20
75c75
< 	    result = ESCAPE;
---
> 	  result = ENDSTR;	/* NOTE JMW replaced ESCAPE with ENDSTR. */

21
14c14
< # define MAXPAT MAXSTR
---
> # define MAXPAT 99
44c44
<     result = fgets(s, maxsize, stdin);
---
>     result = fgets(s, maxsize - 1, stdin);
55c55
<     if (*j >= maxset)
---
>     if (*j > maxset)
209c209
< 	else if ((arg[i] == EOL) && (arg[i+1] == delim))
---
> 	else if ((arg[i] == EOL))

22
140,141c140
<     *i = *i + 1;
<     if (arg[*i] == NEGATE) {
---
>     if (arg[*i + 1] == NEGATE)
143,144c142
< 	*i = *i + 1;
<     } else
---
>     else
145a144
>     *i = *i + 1;

23
74c74
< 	if (s[*i + 1] == ENDSTR)
---
> 	if (s[*i] == ENDSTR)

24
362,363c362
< 		 if (lin[*i] == NEWLINE)
< 		     advance = 0;
---
> 		 advance = 0;

25
362c362
< 		 if (lin[*i] == NEWLINE)
---
> 		 if (lin[*i] <= NEWLINE)

26
370c370
< 		 if ((lin[*i] != NEWLINE) && (!locate(lin[*i], pat, j+1)))
---
> 		 if ((lin[*i] != NEWLINE) && (!locate(lin[*i], pat, j)))

27
182c182
<   return (   c == LITCHAR || c == BOL  || c == EOL || c == ANY 
---
>   return (   c == LITCHAR || c == BOL  || c == ANY 

28
176c176
<   return (c == BOL || c == EOL || c == CLOSURE);
---
>   return (c == BOL || c == EOL || c == CLOSURE || c == CCL);

29
176c176
<   return (c == BOL || c == EOL || c == CLOSURE);
---
>   return (c == BOL || c == EOL || c == CLOSURE || c == NCCL);

30
176c176
<   return (c == BOL || c == EOL || c == CLOSURE);
---
>   return (c == BOL || c == EOL || c == CLOSURE || c != LITCHAR);

31
370c370
< 		 if ((lin[*i] != NEWLINE) && (!locate(lin[*i], pat, j+1)))
---
> 		 if ((lin[*i] >= NEWLINE) && (!locate(lin[*i], pat, j+1)))

32
115c115,116
< 	    else if ((isalnum(src[*i - 1])) && (isalnum(src[*i + 1])) 
---
> 	    else if ((isalnum(src[*i - 1])) & (isalnum(src[*i + 1]))
>                     /*  Replaced logical AND with bitwise AND  */

